{"version":3,"sources":["KeyTerm.js","VideoPicker.js","Player.js","App.js","index.js"],"names":["KeyTerm","props","countryList","require","getAllCountries","term","ListItem","FormControl","InputLabel","id","Select","labelId","onChange","termFunction","defaultValue","map","country","MenuItem","value","toUpperCase","substring","name","VideoPicker","getLink","object","url","items","Math","floor","random","videoId","setUrl","Button","variant","onClick","fetch","type","length","then","res","json","obj","console","log","Player","className","height","width","loop","controls","playing","useStyles","makeStyles","theme","drawerPaper","alignItems","background","borderRadius","App","useState","setLength","setType","setTerm","classes","list","List","style","display","flexDirection","event","target","Divider","newTerm","Drawer","drawer","anchor","paper","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8d4ba598.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\n//This component will allow the user to pick a term based off of their type selection. If they selected Drive or Music, this component will present them with the options for\r\n//countires (if Drive was selected) and different music genres (if Music was selected)\r\n\r\nexport default function KeyTerm(props) {\r\n    const wcc = require(\"world-countries-capitals\");\r\n\r\n    let countryList = wcc.getAllCountries();\r\n    let genre = [\"Ambient\", \"Anime and Chill\", \"Classical Music\", \"Jazz\", \"Oldies Music\", \"Video Games\", \"Lo-Fi\"]\r\n\r\n    if (props.term === \"Drive 4k\") {\r\n        return (\r\n            <>\r\n                <ListItem>\r\n                    <FormControl>\r\n                        <InputLabel id=\"Countries\">Countries</InputLabel>\r\n                        <Select\r\n                        labelId=\"Countries\"\r\n                        id=\"Countries\"\r\n                        onChange={props.termFunction}\r\n                        defaultValue={\"canada\"}\r\n                        >\r\n                        {countryList.map((country) => (\r\n                            <MenuItem key={country} value={country}>{country[0].toUpperCase() + country.substring(1)}</MenuItem>\r\n                        ))}\r\n                        </Select>\r\n                    </FormControl>\r\n                </ListItem>\r\n            </>\r\n        );\r\n    } else if (props.term === \"Music\") {\r\n        return (\r\n            <>\r\n            <ListItem>\r\n                        <FormControl>\r\n                            <InputLabel id=\"Genre\">Music Genre</InputLabel>\r\n                            <Select\r\n                            labelId=\"Genre\"\r\n                            id=\"Genre\"\r\n                            onChange={props.termFunction}\r\n                            defaultValue={\"Lo-Fi\"}\r\n                            >\r\n                            {genre.map((name) => (\r\n                                <MenuItem key={name} value={(name)}>{name}</MenuItem>\r\n                            ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </ListItem>\r\n            </>\r\n        )\r\n    } else {\r\n        return(\r\n            <>\r\n            \r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n//AIzaSyCQHQ8-OJh9tNIRxLd21QTiEcdy295gXK0\r\n//AIzaSyA6wruY8sNsnhYoOz25AVDHnL_uiagFXXU\r\n\r\n//This component will use the youtube api to search for videos based on the selected terms\r\n//It will then parse through the JSON object and select 1 of 7 videos randomly to be played\r\n//It will extract the video id from the JSON object and set the URL to it, which will be passed to the \r\n//VideoPicker component.\r\n\r\nexport default function VideoPicker(props) {\r\n\r\n    //This function will generate a random number\r\n    function randomPicker() {\r\n    var x = Math.floor((Math.random() * 10) + 1);\r\n    return x;\r\n    }\r\n\r\n    //This function will extract the URL of a randomly selected video and set the URL state to match it.\r\n    function getLink(object) {\r\n        let url = object.items[randomPicker()].id.videoId\r\n        props.setUrl(url)\r\n    }\r\n\r\n    // Fetch the data from the youtube api based on the selected terms\r\n    function play () {\r\n        fetch(\"https://youtube.googleapis.com/youtube/v3/search?part=snippet&maxResults=10&q=\"+ props.type + props.term + \"&key=AIzaSyA6wruY8sNsnhYoOz25AVDHnL_uiagFXXU&videoDuration=\"+ props.length + \"&type=video\")\r\n        .then(function(res) {\r\n            return res.json();\r\n        }).then( function (obj) {\r\n            console.log(obj);\r\n            getLink(obj);\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <Button variant=\"outlined\" onClick={()=> play()}>Play</Button>\r\n    )\r\n}","import React from 'react'\r\nimport ReactPlayer from 'react-player/youtube'\r\n\r\n// https://www.youtube.com/watch?v=\r\n\r\n//This component will use the ReactPlayer npm package to play youtube videos.\r\n\r\nexport default function Player(props){\r\n    return (\r\n        <>\r\n        <div className='player-wrapper'>\r\n            <ReactPlayer\r\n                className='react-player'\r\n                url={'https://www.youtube.com/watch?v='+ props.url}\r\n                height='955px'\r\n                width='88.5%'\r\n                loop={true}\r\n                controls={true}\r\n                playing={true}\r\n            />\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","import React, { useState } from \"react\";\nimport KeyTerm from \"./KeyTerm\"\nimport VideoPicker from \"./VideoPicker\"\nimport Player from \"./Player\"\n\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Divider from \"@material-ui/core/Divider\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport ListItem from \"@material-ui/core/ListItem\";\n\n\n\nconst useStyles = makeStyles((theme) => ({\n\tdrawerPaper: {\n\t\twidth: \"12%\",\n\t\talignItems: \"center\",\n\t\tbackground: \"linear-gradient(75deg, #FE6B8B 30%, #FF8E53 90%)\",\n\t\tborderRadius: \"3px\",\n\t\t\n\t},\n\t}));\n\n\texport default function App() {\n\t\tconst [length, setLength] = useState(\"Long\");\n\t\tconst [type, setType] = useState(\"Drive 4k\");\n\t\tconst [term, setTerm] = useState(\"canada\");\n\t\tconst [url, setUrl] = useState(\"\");\n\t\tconst classes = useStyles();\n\n\t\n\t//This function will extract the value from the user selected option. In this case, it will set the type of the video accordingly.\n\t//If visual loops was selected, the function will reset the keyterm value, since it is not necessary and would avoid conflict of search results.\n\tconst handleTypeChange = (event) => {\n\t\tsetType(event.target.value);\n\t\tif(event.target.value === \"Visual Loops\") {\n\t\t\tsetTerm(\"\");\n\t\t}\n\t};\n\n\t//This function will extract the value from the user selected option and will set the duration/length of the video.\n\tconst handleLengthChange = (event) => {\n\t\tsetLength(event.target.value);\n\t};\n\n\t//This function will extract the value from the user selected option and will set the keyterm value. However, depending on the keyterm selected,\n\t//this function will adjust it accordingly to better match the theme of the site. \n\tfunction handleTermChange(event){\n\t\tlet newTerm = event.target.value;\n\t\tif (newTerm === \"Oldies Music\") {\n\t\t\tsetTerm(\"Oldies Music playing in another room\")\n\t\t} else if (newTerm === \"Video Games\") {\n\t\t\tsetTerm(\"Video Games and Chill\") \n\t\t} else {\n\t\t\tsetTerm(newTerm);\n\t\t}\n\t}\n\n\t//This is the list element, and it contains the menue where users will interact with the site. In here, users are able to select what\n\t//type of videos they want to watch and the duration of the videos.\n\tconst list = (\n\t\t<List style={{display:\"flex\", flexDirection:\"column\"}}>\n\t\t<ListItem>\n\t\t\t<FormControl>\n\t\t\t<InputLabel id=\"Type\">Type </InputLabel>\n\t\t\t<Select\n\t\t\t\tlabelId=\"Type\"\n\t\t\t\tid=\"Type\"\n\t\t\t\tvalue={type}\n\t\t\t\tonChange={handleTypeChange}\n\t\t\t>\n\t\t\t\t<MenuItem value={\"Drive 4k\"}>Drive</MenuItem>\n\t\t\t\t<MenuItem value={\"Music\"}>Music</MenuItem>\n\t\t\t\t<MenuItem value={\"Visual Loops\"}>Visual Loops</MenuItem>\n\t\t\t</Select>\n\t\t\t</FormControl>\n\t\t</ListItem>\n\t\t<Divider />\n\n\t\t<ListItem>\n\t\t\t<FormControl>\n\t\t\t<InputLabel id=\"Length\">Length</InputLabel>\n\t\t\t<br />\n\t\t\t<Select\n\t\t\t\tlabelId=\"Length\"\n\t\t\t\tid=\"Length\"\n\t\t\t\tvalue={length}\n\t\t\t\tonChange={handleLengthChange}\n\t\t\t>\n\t\t\t\t<MenuItem value={\"any\"}>Any</MenuItem>\n\t\t\t\t<MenuItem value={\"Long\"}>Long</MenuItem>\n\t\t\t\t<MenuItem value={\"Medium\"}>Medium</MenuItem>\n\t\t\t\t<MenuItem value={\"Short\"}>Short</MenuItem>\n\t\t\t</Select>\n\t\t\t</FormControl>\n\t\t</ListItem>\n\n\t\t<Divider />\n\t\t\t<KeyTerm term={type} termFunction={handleTermChange}/>\n\t\t{/* <Button onClick={addValues(Type.value, Length.value)}></Button> */}\n\t\t<VideoPicker type={type} length={length} term={term} setUrl={setUrl}/>\n\t\t</List>\n\t);\n\n\treturn (\n\t\t<div>\n\t\t\t<Drawer\n\t\t\t\tclassName={classes.drawer}\n\t\t\t\tvariant=\"permanent\"\n\t\t\t\tanchor=\"right\"\n\t\t\t\tclasses={{\n\t\t\t\tpaper: classes.drawerPaper,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{list}\n\t\t\t</Drawer>\n\t\t\t<KeyTerm/>\n\t\t\t<Player url={url}/>\n\t\t</div>\n\t);\n\t}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}